service: file-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  memorySize: 128
  timeout: 10

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [userTable, Arn]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ fileTable, Arn ]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ inviteTable, Arn ]

    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"

# Packaging global configuration
package:
  # Create separate zip for each Lambda function
  individually: true
  patterns:
    # Exclude everything (each Lambda will specify which directory should be included)
    # To exclude use '!' prefix
    - '!**/**'
    # Include utility directory for every Lambda function
    - 'utility/**'

functions:
  createUser:
    handler: createUsers/create_users.create
    package:
      include: 'createUsers/**'
    events:
      - http:
          path: users
          method: post
          cors: true

  getUsers:
    handler: getUsers/get_users.get_all
    package:
      include: 'getUsers/**'
    events:
      - http:
          path: users
          method: get
          cors: true

  getUser:
    handler: getUser/get_user.get_one
    package:
      include: 'getUser/**'
    events:
      - http:
          path: users/{username}
          method: get
          cors: true
          request:
            parameters:
              paths:
                username: true

  createFile:
    handler: createFiles/create_files.create
    package:
      include: 'createFiles/**'
    events:
      - http:
          path: files
          method: post
          cors: true

  updateFile:
    handler: updateFile/update_file.create
    package:
      include: 'updateFile/**'
    events:
      - http:
          path: files
          method: put
          cors: true

  deleteFile:
    handler: deleteFile/delete_file.delete
    package:
      include: 'deleteFile/**'
    events:
      - http:
          path: files/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true

  getFiles:
    handler: getFiles/get_files.get_all
    package:
      include: 'getFiles/**'
    events:
      - http:
          path: files
          method: get
          cors: true

  getFile:
    handler: getFile/get_file.get_one
    package:
      include: 'getFile/**'
    events:
      - http:
          path: files/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  downloadFile:
    handler: downloadFile/download_file.download_object
    package:
      include: 'downloadFile/**'
    events:
      - http:
          path: download/{id}
          method: get
          cors: true
          # Specifying path parameters
          request:
            parameters:
              paths:
                id: true

  getFolder:
    handler: getFolder/get_folder.get_one
    package:
      include: 'getFolder/**'
    events:
      - http:
          path: folder/{sufix}
          method: get
          cors: true
          request:
            parameters:
              paths:
                sufix: true

  createFolder:
    handler: createFolder/create_folder.create
    package:
      include: 'createFolder/**'
    events:
      - http:
          path: folder
          method: post
          cors: true

  deleteFolder:
    handler: deleteFolder/delete_folder.delete
    package:
      include: 'deleteFolder/**'
    events:
      - http:
          path: deleteFolder
          method: post
          cors: true


  getFolders:
    handler: getFolders/get_folders.get_one
    package:
      include: 'getFolders/**'
    events:
      - http:
          path: folders/{username}
          method: get
          cors: true
          request:
            parameters:
              paths:
                username: true

  createInvitation:
    handler: createInvitation/create_invitation.create
    package:
      include: 'createInvitation/**'
    events:
      - http:
          path: invitation
          method: post
          cors: true


  getInvitation:
    handler: getInvitation/get_invitation.get_one
    package:
      include: 'getInvitation/**'
    events:
      - http:
          path: invitation/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true              

  sendSMS:
    handler: sendNotification/send.send_sms
    package:
      include: 'sendNotification/**'
    events:
      - http:
          path: sendSMS
          method: post
          cors: true



resources:
  Resources:
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: userTable
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    fileTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: fileTable
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    inviteTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: inviteTable
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
